package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/yourusername/screner/internal/config"
	"github.com/yourusername/screner/internal/exchange"
	"github.com/yourusername/screner/internal/redisclient"
	"github.com/yourusername/screner/internal/util"
)

func main() {
	fmt.Println("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –¢–ò–ö–ï–†–û–í –ù–ê BYBIT ===")
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("configs/screener-core.yaml")
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –∫–ª–∏–µ–Ω—Ç
	redisClient := redisclient.NewRedisClient(cfg.Redis.RedisAddress(), cfg.Redis.Password, 0)
	fmt.Printf("‚úÖ Redis client initialized: %s\n", cfg.Redis.RedisAddress())
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
	symbols, err := util.LoadSymbolsFromFile("Temp/all_contracts_merged_reformatted.json")
	if err != nil {
		log.Fatalf("Error loading symbols: %v", err)
	}
	fmt.Printf("‚úÖ Loaded %d symbols from JSON file\n", len(symbols))
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	fmt.Println("üìã –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:")
	for i, symbol := range symbols {
		if i >= 10 {
			break
		}
		fmt.Printf("   %d. %s\n", i+1, symbol)
	}
	
	// –°–æ–∑–¥–∞–µ–º Bybit –∫–ª–∏–µ–Ω—Ç
	url := "wss://stream.bybit.com/v5/public/spot"
	client := exchange.NewBybitClient(url)
	
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit
	if err := client.Connect(); err != nil {
		log.Fatalf("Failed to connect to Bybit: %v", err)
	}
	fmt.Println("‚úÖ Successfully connected to Bybit")
	
	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
	testSymbols := symbols[:5]
	for _, symbol := range testSymbols {
		if err := client.Subscribe(symbol); err != nil {
			fmt.Printf("‚ùå Failed to subscribe to %s: %v\n", symbol, err)
			continue
		}
		fmt.Printf("‚úÖ Subscribed to %s\n", symbol)
		time.Sleep(500 * time.Millisecond)
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º ReadLoop –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go client.ReadLoop("bybit", "test")
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º KeepAlive –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go client.KeepAlive()
	
	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
	receivedTickers := make(map[string]int)
	go func() {
		for marketData := range client.Out() {
			receivedTickers[marketData.Symbol]++
			
			// –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å
			fmt.Printf("üìä %s: %.4f (–ø–æ–ª—É—á–µ–Ω–æ %d —Ä–∞–∑)\n", 
				marketData.Symbol, marketData.Price, receivedTickers[marketData.Symbol])
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
			redisKey := fmt.Sprintf("price:%s:%s", marketData.Exchange, marketData.Symbol)
			if err := redisClient.HSet(redisKey, 
				"price", marketData.Price,
				"timestamp", marketData.Timestamp,
				"exchange", marketData.Exchange,
				"symbol", marketData.Symbol); err != nil {
				fmt.Printf("‚ùå Failed to save %s to Redis: %v\n", marketData.Symbol, err)
			}
		}
	}()
	
	fmt.Printf("üöÄ Monitoring %d test symbols...\n", len(testSymbols))
	fmt.Println("üìà –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä–∞–º...")
	
	// –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	time.Sleep(30 * time.Second)
	
	fmt.Println("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 30 –°–ï–ö–£–ù–î:")
	for symbol, count := range receivedTickers {
		fmt.Printf("   %s: %d —Å–æ–æ–±—â–µ–Ω–∏–π\n", symbol, count)
	}
	
	// Graceful shutdown
	fmt.Println("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	client.Close()
	
	fmt.Println("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
}